// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// End-user leads (homeowners searching for their project photos)
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  address   String   // The address they searched for
  projectId String?  // CompanyCam project ID they viewed
  tenant    String   // Which business this lead belongs to (e.g., "budroofing")
  createdAt DateTime @default(now())

  @@index([tenant])
  @@index([createdAt])
}

// Business users (contractors signing up to use Camvasser)
model BusinessUser {
  id           String   @id @default(cuid())
  name         String   // Person's name
  email        String   @unique
  phone        String
  companyName  String
  domain       String?  // Their website domain
  slug         String?  @unique // URL slug like "budroofing"
  status       String   @default("pending") // pending, approved, rejected
  passwordHash String?  // Hashed password for login
  createdAt    DateTime @default(now())
  approvedAt   DateTime?

  @@index([createdAt])
  @@index([status])
  @@index([email])
}

// Cached CompanyCam project data
model Project {
  id            String   @id  // CompanyCam project ID
  tenant        String   // Which business (e.g., "budroofing")
  address       String?
  city          String?
  state         String?
  postalCode    String?
  name          String?
  status        String?  // active, deleted, etc
  photoCount    Int      @default(0)
  publicUrl     String?
  coordinates   Json?    // {lat, lon}

  // Sync tracking
  lastSyncedAt  DateTime @default(now())
  createdAt     DateTime @default(now())

  // Relations
  labels        ProjectLabel[]

  @@index([tenant])
  @@index([address])
  @@index([lastSyncedAt])
}

// Project labels (tags/statuses from CompanyCam)
model ProjectLabel {
  id           String   @id @default(cuid())
  projectId    String   // Links to Project
  labelId      String   // CompanyCam label ID
  displayValue String   // "Door Hanger"
  value        String   // "door hanger"
  tagType      String   // "project"

  createdAt    DateTime @default(now())

  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([value])
}
